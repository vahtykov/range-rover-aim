{"version":3,"sources":["range.jpg","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","App","useState","_salary","_setSalary","_moneyNow","_setMoneyNow","_roverPrice","className","src","range","alt","toLocaleString","toFixed","value","onChange","e","parseInt","target","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6GAAAA,EAAOC,QAAU,IAA0B,mC,sLCqC5BC,MAjCf,WAAgB,IAAD,EACiBC,mBAAS,MAD1B,mBACNC,EADM,KACGC,EADH,OAEqBF,mBAAS,OAF9B,mBAENG,EAFM,KAEKC,EAFL,OAGyBJ,mBAAS,MAHlC,mBAGNK,EAHM,KAKb,OALa,KAMX,yBAAKC,UAAU,OACb,iMAIA,yBAAKC,IAAKC,IAAOC,IAAI,qGAAqBH,UAAU,aAEpD,wBAAIA,UAAU,aAAd,UACOH,EAAUO,iBADjB,2BAC+CL,EAAYK,iBAD3D,YAIA,gGAA6BT,EAAQS,iBAArC,0GAAmFL,EAAcF,GAAWF,GAASU,QAAQ,GAA7H,+CAEA,oIAEE,2BAAOC,MAAOT,EAAWU,SAAU,SAACC,GAAD,OAAOV,EAAaW,SAASD,EAAEE,OAAOJ,SAASN,UAAU,QAAQW,KAAK,YAE3G,6BACA,6BACA,gIAEE,2BAAOL,MAAOX,EAASY,SAAU,SAACC,GAAD,OAAOZ,EAAWa,SAASD,EAAEE,OAAOJ,SAASN,UAAU,QAAQW,KAAK,cCnBzFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.be732a3b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/range.26f73441.jpg\";","import React, { useState, useEffect } from 'react';\nimport range from './range.jpg';\nimport './App.css';\n\nfunction App() {\n  const [_salary, _setSalary] = useState(65000);\n  const [_moneyNow, _setMoneyNow] = useState(108000);\n  const [_roverPrice, _setRoverPrice] = useState(1300000);\n\n  return (\n    <div className=\"App\">\n      <h1>\n        Накопление на Range Rover Vogue 3-го поколения\n      </h1>\n\n      <img src={range} alt='Так выглядит мечта' className='rangeImg' />\n\n      <h2 className='rangeSumm'>\n        { `${_moneyNow.toLocaleString()} ₽` } / { `${_roverPrice.toLocaleString()} ₽` }\n      </h2>\n\n      <h3>До RR Vogue, при зп { `${_salary.toLocaleString()} ₽` } в месяц, осталось: { ((_roverPrice - _moneyNow)/_salary).toFixed(1) } месяцев</h3>\n\n      <label>\n        Накоплений сейчас:\n        <input value={_moneyNow} onChange={(e) => _setMoneyNow(parseInt(e.target.value))} className='input' type='number' />\n      </label>\n      <br />\n      <br />\n      <label>\n        Текущая зп в месяц:\n        <input value={_salary} onChange={(e) => _setSalary(parseInt(e.target.value))} className='input' type='number' />\n      </label>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}